<Application x:Class="XLY.Framework.WPFTest.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/Util.Controls;component/Style/Colors.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/Util.Controls;component/Style/Global.xaml" />
                <ResourceDictionary Source="pack://application:,,,/Util.Controls;component/Style/Themes/FIcon.xaml" />
                <ResourceDictionary Source="pack://application:,,,/Util.Controls;component/Control/FButton.xaml" />
                <ResourceDictionary Source="pack://application:,,,/Util.Controls;component/Style/Style.xaml"/>
            </ResourceDictionary.MergedDictionaries>

            <Style TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource DefaultScrollBar}"></Style>
            <Style TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource DefaultScrollViewer}"></Style>
            <Style TargetType="{x:Type RichTextBox}" BasedOn="{StaticResource DefaultRichTextBox}"/>

            <Style TargetType="TextBox" BasedOn="{StaticResource DefaultTextBox}"></Style>
            <Style TargetType="CheckBox" BasedOn="{StaticResource DefaultCheckBox}"></Style>
            <Style TargetType="RadioButton" BasedOn="{StaticResource DefaultRadioButton}"></Style>
            <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource DefaultMenuItem}"></Style>
            <Style TargetType="{x:Type Menu}" BasedOn="{StaticResource DefaultMenu}"></Style>
            <Style TargetType="{x:Type ContextMenu}" BasedOn="{StaticResource DefaultContextMenu}"></Style>
            <Style TargetType="{x:Type DataGrid}" BasedOn="{StaticResource DefaultDataGrid}"></Style>
            <Style TargetType="{x:Type TreeView}" BasedOn="{StaticResource DefaultTreeView}"></Style>
            <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource DefaultComboBox}"></Style>
            <Style TargetType="{x:Type DatePicker}" BasedOn="{StaticResource DefaultDatePicker}"></Style>
            <Style TargetType="{x:Type ListBox}" BasedOn="{StaticResource DefaultListBox}"></Style>
            <Style TargetType="{x:Type PasswordBox}" BasedOn="{StaticResource DefaultPasswordBox}"></Style>
            <Style TargetType="{x:Type ListView}" BasedOn="{StaticResource DefaultListView}"></Style>
            
            <Style x:Key="NewButton" TargetType="{x:Type Button}">
                <Setter Property="Padding" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid Cursor="Hand">
                                <Border x:Name="_Border" Background="{TemplateBinding Background}" CornerRadius="5" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                                </Border>
                                <!--ContentPresenter的作用就是显示内容，但Control类没有这个Content属性，所以在Control类之上写了一个ContentControl类，然后ContentPresenter(其显示依赖于ContentControl类)负责将ContentControl的Content属性显示出来。每个控件都有一个默认的ContentPresenter用于显示Content内容，这种控件为内容控件-->
                                <!--SnapsToDevicePixels获取或设置一个值，该值确定在呈现过程中，此元素的呈现是否应使用特定于设备的像素设置。 这是依赖项属性。-->
                                <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Grid>
                            <!--定义触发器-->
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" TargetName="_Border">
                                        <Setter.Value>
                                            <SolidColorBrush Color="#ef3c62"/>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Background" TargetName="_Border">
                                        <Setter.Value>
                                            <SolidColorBrush Color="Gray"/>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                            </ControlTemplate.Triggers>
                            <!--定义触发器_End-->
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </ResourceDictionary>



    </Application.Resources>
</Application>
